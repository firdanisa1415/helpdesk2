{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { toDisplayString as _toDisplayString, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, resolveComponent as _resolveComponent, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nvar _hoisted_1 = {\n  key: 0\n};\nvar _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component__self = _resolveComponent(\"_self\");\n  return _openBlock(), _createBlock(\"li\", null, [_createVNode(\"div\", {\n    class: {\n      bold: $options.isFolder\n    },\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.toggle && $options.toggle.apply($options, arguments);\n    }),\n    onDblclick: _cache[2] || (_cache[2] = function () {\n      return $options.changeType && $options.changeType.apply($options, arguments);\n    })\n  }, [_createTextVNode(_toDisplayString($props.model.name) + \" \", 1 /* TEXT */), $options.isFolder ? (_openBlock(), _createBlock(\"span\", _hoisted_1, \"[\" + _toDisplayString($data.isOpen ? '-' : '+') + \"]\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 34 /* CLASS, HYDRATE_EVENTS */), $options.isFolder ? _withDirectives((_openBlock(), _createBlock(\"ul\", _hoisted_2, [_createCommentVNode(\"\\r\\n        A component can recursively render itself using its\\r\\n        \\\"name\\\" option (inferred from filename if using SFC)\\r\\n      \"), (_openBlock(true), _createBlock(_Fragment, null, _renderList($props.model.children, function (model) {\n    return _openBlock(), _createBlock(_component__self, {\n      class: \"item\",\n      model: model\n    }, null, 8 /* PROPS */, [\"model\"]);\n  }), 256 /* UNKEYED_FRAGMENT */)), _createVNode(\"li\", {\n    class: \"add\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $options.addChild && $options.addChild.apply($options, arguments);\n    })\n  }, \"+\")], 512 /* NEED_PATCH */)), [[_vShow, $data.isOpen]]) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"sources":["D:\\Tugas\\helpdesk\\src\\components\\TreeItem.vue"],"names":[],"mappings":";;;;;;;;;;uBAuCE,YAAA,CAoBK,IAAA,EAAA,IAAA,EAAA,CAnBH,YAAA,CAMM,KAAA,EAAA;IALH,KAAK,EAAA;MAAA,IAAA,EAAU,QAAA,CAAA;IAAQ,CAAA;IACvB,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;MAAA,OAAE,QAAA,CAAA,MAAA,IAAA,QAAA,CAAA,MAAA,OAAA,QAAA,YAAM;IAAA,CAAA,CAAA;IACb,UAAQ,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;MAAA,OAAE,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAU;IAAA,CAAA;wCAClB,MAAA,CAAA,KAAK,CAAC,IAAI,CAAA,GAAG,GAChB,EAAA,CAAA,CAAA,WAAA,EAAY,QAAA,CAAA,QAAQ,I,cAApB,YAAA,CAAuD,MAAA,EAAA,UAAA,EAAjC,GAAC,GAAA,gBAAA,CAAG,KAAA,CAAA,MAAM,GAAA,GAAA,GAAA,GAAA,CAAA,GAAe,GAAC,EAAA,CAAA,CAAA,WAAA,I,qEAExB,QAAA,CAAA,QAAQ,G,+BAAlC,YAAA,CAWK,IAAA,EAAA,UAAA,EAAA,CAVH,mBAAA,CAAA,4IAAA,CAGG,G,kBACH,YAAA,CAIW,SAAA,EAAA,IAAA,EAAA,WAAA,CAFO,MAAA,CAAA,KAAK,CAAC,QAAQ,EAAA,UAAvB,KAAK,EAAA;yBAFd,YAAA,CAIW,gBAAA,EAAA;MAHT,KAAK,EAAC,MAAM;MAEX,KAAK,EAAE;;oCAEV,YAAA,CAAwC,IAAA,EAAA;IAApC,KAAK,EAAC,KAAK;IAAE,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;MAAA,OAAE,QAAA,CAAA,QAAA,IAAA,QAAA,CAAA,QAAA,OAAA,QAAA,YAAQ;IAAA,CAAA;KAAE,GAAC,CAAA,C,oCAVzB,KAAA,CAAA,MAAM,CAAA,C","sourcesContent":["<script>\r\nexport default {\r\n  name: 'TreeItem', // necessary for self-reference\r\n  props: {\r\n    model: Object\r\n  },\r\n  data() {\r\n    return {\r\n      isOpen: false\r\n    }\r\n  },\r\n  computed: {\r\n    isFolder() {\r\n      return this.model.children && this.model.children.length\r\n    }\r\n  },\r\n  methods: {\r\n    toggle() {\r\n      if (this.isFolder) {\r\n        this.isOpen = !this.isOpen\r\n      }\r\n    },\r\n    changeType() {\r\n      if (!this.isFolder) {\r\n        this.model.children = []\r\n        this.addChild()\r\n        this.isOpen = true\r\n      }\r\n    },\r\n    addChild() {\r\n      this.model.children.push({\r\n        name: 'new stuff'\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <li>\r\n    <div\r\n      :class=\"{ bold: isFolder }\"\r\n      @click=\"toggle\"\r\n      @dblclick=\"changeType\">\r\n      {{ model.name }}\r\n      <span v-if=\"isFolder\">[{{ isOpen ? '-' : '+' }}]</span>\r\n    </div>\r\n    <ul v-show=\"isOpen\" v-if=\"isFolder\">\r\n      <!--\r\n        A component can recursively render itself using its\r\n        \"name\" option (inferred from filename if using SFC)\r\n      -->\r\n      <TreeItem\r\n        class=\"item\"\r\n        v-for=\"model in model.children\"\r\n        :model=\"model\">\r\n      </TreeItem>\r\n      <li class=\"add\" @click=\"addChild\">+</li>\r\n    </ul>\r\n  </li>\r\n</template>"],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}